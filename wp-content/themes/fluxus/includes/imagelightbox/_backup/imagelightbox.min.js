/*
	By Osvaldas Valutis, www.osvaldas.info
	Available for use under the MIT License
*/





jQuery(document).ready(function(){

	var imagelinks = jQuery("a[href*='.jpg'], a[href*='.png'], a[href*='.gif']");

	imagelinks.each(function() {
		jQuery(this).addClass("imagelightbox__imglink").append("<div class='imagelightbox__icon'>", "</div>");
		if(!jQuery(this).children("img").attr("title")) {
			var caption = jQuery(this).next(".wp-caption-text").text();
			if(caption) {
				jQuery(this).children("img").attr("title", caption);
			}
		}
		if(!jQuery(this).parents('.wp-caption, .gallery').length) {
			var imgclasses = jQuery(this).children("img").attr('class');
			jQuery(this).wrapAll("<div class='wp-caption " + imgclasses + "'>", "</div>");
			jQuery(this).children("img").removeClass("alignnone alignleft aligncenter alignright");
		}
	});

});





(function(e, t, n, r) {
	"use strict";
	var i = function() {
			var e = n.body || n.documentElement,
				e = e.style;
			if (e.WebkitTransition == "") return "-webkit-";
			if (e.MozTransition == "") return "-moz-";
			if (e.OTransition == "") return "-o-";
			if (e.transition == "") return "";
			return false
		},
		s = i() === false ? false : true,
		o = function(e, t, n) {
			var r = {},
				s = i();
			r[s + "transform"] = "translateX(" + t + ")";
			r[s + "transition"] = s + "transform " + n + "s linear";
			e.css(r)
		},
		u = "ontouchstart" in t,
		a = t.navigator.pointerEnabled || t.navigator.msPointerEnabled,
		f = function(e) {
			if (u) return true;
			if (!a || typeof e === "undefined" || typeof e.pointerType === "undefined") return false;
			if (typeof e.MSPOINTER_TYPE_MOUSE !== "undefined") {
				if (e.MSPOINTER_TYPE_MOUSE != e.pointerType) return true
			} else if (e.pointerType != "mouse") return true;
			return false
		};
	e.fn.imageLightbox = function(r) {
		var r = e.extend({
				selector: 'class="imagelightbox"',
				allowedTypes: "png|jpg|jpeg|gif",
				animationSpeed: 250,
				preloadNext: true,
				enableKeyboard: true,
				quitOnEnd: false,
				quitOnImgClick: false,
				quitOnDocClick: true,
				onStart: false,
				onEnd: false,
				onLoadStart: false,
				onLoadEnd: false
			}, r),
			i = e([]),
			l = e(),
			c = e(),
			h = 0,
			p = 0,
			d = 0,
			v = false,
			m = function(t) {
				return e(t).prop("tagName").toLowerCase() == "a" && (new RegExp(".(" + r.allowedTypes + ")$", "i")).test(e(t).attr("href"))
			},
			g = function() {
				if (!c.length) return true;
				var n = e(t).width() * .8,
					r = e(t).height() * .9,
					i = new Image;
				i.src = c.attr("src");
				i.onload = function() {
					h = i.width;
					p = i.height;
					if (h > n || p > r) {
						var s = h / p > n / r ? h / n : p / r;
						h /= s;
						p /= s
					}
					c.css({
						width: h + "px",
						height: p + "px",
						//top: (e(t).height() - p) / 2 + "px",
						top: ((e(t).height() - p) / 2) - 20 + "px",
						left: (e(t).width() - h) / 2 + "px"
					})
				}
			},
			y = function(t) {
				if (v) return false;
				t = typeof t === "undefined" ? false : t == "left" ? 1 : -1;
				if (c.length) {
					if (t !== false && (i.length < 2 || r.quitOnEnd === true && (t === -1 && i.index(l) == 0 || t === 1 && i.index(l) == i.length - 1))) {
						w();
						return false
					}
					var n = {
						opacity: 0
					};
					if (s) o(c, 100 * t - d + "px", r.animationSpeed / 1e3);
					else n.left = parseInt(c.css("left")) + 100 * t + "px";
					c.animate(n, r.animationSpeed, function() {
						b()
					});
					d = 0
				}
				v = true;
				if (r.onLoadStart !== false) r.onLoadStart();
				setTimeout(function() {
					c = e("<img " + r.selector + " />").attr("src", l.attr("href")).load(function() {
						c.appendTo("body");
						
						////////// get format of image and add class
/*
						var image;
						image = new Image();
						image.src = l.attr("href");
						if(image.height >= image.width){
							c.addClass("hf");
						} else {
							c.addClass("qf");
						}
*/
						
						g();
						var n = {
							opacity: 1
						};
						c.css("opacity", 0);
						if (s) {
							o(c, -100 * t + "px", 0);
							setTimeout(function() {
								o(c, 0 + "px", r.animationSpeed / 1e3)
							}, 50)
						} else {
							var u = parseInt(c.css("left"));
							n.left = u + "px";
							c.css("left", u - 100 * t + "px")
						}
						c.animate(n, r.animationSpeed, function() {
							v = false;
							if (r.onLoadEnd !== false) r.onLoadEnd()
						});
						if (r.preloadNext) {
							var a = i.eq(i.index(l) + 1);
							if (!a.length) a = i.eq(0);
							e("<img />").attr("src", a.attr("href")).load()
						}
					}).error(function() {
						if (r.onLoadEnd !== false) r.onLoadEnd()
					});
					var n = 0,
						u = 0,
						p = 0;
					c.on(a ? "pointerup MSPointerUp" : "click", function(e) {
						e.preventDefault();
						if (r.quitOnImgClick) {
							w();
							return false
						}
						if (f(e.originalEvent)) return true;
						var t = (e.pageX || e.originalEvent.pageX) - e.target.offsetLeft;
						l = i.eq(i.index(l) - (h / 2 > t ? 1 : -1));
						if (!l.length) l = i.eq(h / 2 > t ? i.length : 0);
						y(h / 2 > t ? "left" : "right")
					}).on("touchstart pointerdown MSPointerDown", function(e) {
						if (!f(e.originalEvent) || r.quitOnImgClick) return true;
						if (s) p = parseInt(c.css("left"));
						n = e.originalEvent.pageX || e.originalEvent.touches[0].pageX
					}).on("touchmove pointermove MSPointerMove", function(e) {
						if (!f(e.originalEvent) || r.quitOnImgClick) return true;
						e.preventDefault();
						u = e.originalEvent.pageX || e.originalEvent.touches[0].pageX;
						d = n - u;
						if (s) o(c, -d + "px", 0);
						else c.css("left", p - d + "px")
					}).on("touchend touchcancel pointerup pointercancel MSPointerUp MSPointerCancel", function(e) {
						if (!f(e.originalEvent) || r.quitOnImgClick) return true;
						if (Math.abs(d) > 50) {
							l = i.eq(i.index(l) - (d < 0 ? 1 : -1));
							if (!l.length) l = i.eq(d < 0 ? i.length : 0);
							y(d > 0 ? "right" : "left")
						} else {
							if (s) o(c, 0 + "px", r.animationSpeed / 1e3);
							else c.animate({
								left: p + "px"
							}, r.animationSpeed / 2)
						}
					})
				}, r.animationSpeed + 100)
			},
			b = function() {
				if (!c.length) return false;
				c.remove();
				c = e()
			},
			w = function() {
				if (!c.length) return false;
				c.animate({
					opacity: 0
				}, r.animationSpeed, function() {
					b();
					v = false;
					if (r.onEnd !== false) r.onEnd()
				})
			};
		e(t).on("resize", g);
		if (r.quitOnDocClick) {
			e(n).on(u ? "touchend" : "click", function(t) {
				if (c.length && !e(t.target).is(c)) w()
			})
		}
		if (r.enableKeyboard) {
			e(n).on("keyup", function(e) {
				if (!c.length) return true;
				e.preventDefault();
				if (e.keyCode == 27) w();
				if (e.keyCode == 37 || e.keyCode == 39) {
					l = i.eq(i.index(l) - (e.keyCode == 37 ? 1 : -1));
					if (!l.length) l = i.eq(e.keyCode == 37 ? i.length : 0);
					y(e.keyCode == 37 ? "left" : "right")
				}
			})
		}
		e(n).on("click", this.selector, function(t) {
			if (!m(this)) return true;
			t.preventDefault();
			if (v) return false;
			v = false;
			if (r.onStart !== false) r.onStart();
			l = e(this);
			y()
		});
		this.each(function() {
			if (!m(this)) return true;
			i = i.add(e(this))
		});
		this.switchImageLightbox = function(e) {
			var t = i.eq(e);
			if (t.length) {
				var n = i.index(l);
				l = t;
				y(e < n ? "left" : "right")
			}
			return this
		};
		this.quitImageLightbox = function() {
			w();
			return this
		};
		return this
	}
})(jQuery, window, document);





jQuery(function()
	{
		// ACTIVITY INDICATOR
		var activityIndicatorOn = function()
			{
				jQuery( '<div class="imagelightbox__loading"><div>' ).appendTo( 'body' );
			},
			activityIndicatorOff = function()
			{
				jQuery( '.imagelightbox__loading' ).remove();
			};

		// OVERLAY
		var overlayOn = function()
			{
				jQuery( '<div class="imagelightbox__overlay"></div>' ).appendTo( 'body' );
			},
			overlayOff = function()
			{
				jQuery( '.imagelightbox__overlay' ).remove();
			};

		// CLOSE BUTTON
		var closeButtonOn = function( instance )
			{
				jQuery( '<button class="imagelightbox__close" type="button" title="Close"></button>' ).appendTo( 'body' ).on( 'click touchend', function(){ jQuery( this ).remove(); instance.quitImageLightbox(); return false; });
			},
			closeButtonOff = function()
			{
				jQuery( '.imagelightbox__close' ).remove();
			};

		// CAPTION
		var captionOn = function()
			{
				////////// Bildunterschrift aus extra Feld imgtext
				//var description = jQuery( 'a[href="' + jQuery( '.imagelightbox' ).attr( 'src' ) + '"] img' ).attr( 'title' );
				var description = jQuery( 'a[href="' + jQuery( '.imagelightbox' ).attr( 'src' ) + '"] img' ).attr( 'imgtext' );
				if( description )
					var descriptionblock = '<div class="imagelightbox__caption typo">' + description + '</div>';
					jQuery(descriptionblock).appendTo( 'body' );
			},
			captionOff = function()
			{
				jQuery( '.imagelightbox__caption' ).remove();
			};

		// ARROWS
		var arrowsOn = function( instance, selector )
			{
				var $arrows = jQuery( '<button class="imagelightbox__arrow imagelightbox__arrow--left" type="button"></button><button class="imagelightbox__arrow imagelightbox__arrow--right" type="button"></button>' );

				$arrows.appendTo( 'body' );

				$arrows.on( 'click touchend', function( e )
				{
					e.preventDefault();
					var $this	= jQuery( this ),
						$target	= jQuery( selector + '[href="' + jQuery( '.imagelightbox' ).attr( 'src' ) + '"]' ),
						index	= $target.index( selector );

					if( $this.hasClass( 'imagelightbox__arrow--left' ) )
					{
						index = index - 1;
						if( !jQuery( selector ).eq( index ).length )
							index = jQuery( selector ).length;
					}
					else
					{
						index = index + 1;
						if( !jQuery( selector ).eq( index ).length )
							index = 0;
					}
					instance.switchImageLightbox( index );
					return false;
				});
			},
			arrowsOff = function()
			{
				jQuery( '.imagelightbox__arrow' ).remove();
			},
			arrowsHide = function( instance, selector )
			{
				var	$target	= jQuery( selector + '[href="' + jQuery( '.imagelightbox' ).attr( 'src' ) + '"]' ),
					index	= $target.index( selector );
				if( index == jQuery(selector).length - 1 )
					jQuery('.imagelightbox__arrow--right').hide();
				if( index == 0 )
					jQuery('.imagelightbox__arrow--left').hide();
			};

		// INIT IMAGELIGHTBOX
		var selector = '.imagelightbox__imglink';
		var instance = jQuery( selector ).imageLightbox(
		{
			onStart:		function() { overlayOn(); closeButtonOn( instance ); arrowsOn( instance, selector ); arrowsHide( instance, selector ); },
			onEnd:			function() { overlayOff(); captionOff(); closeButtonOff(); arrowsOff(); activityIndicatorOff(); },
			onLoadStart: 	function() { captionOff(); activityIndicatorOn(); },
			onLoadEnd:	 	function() { 
								captionOn(); 
								activityIndicatorOff(); 
								jQuery( '.imagelightbox__arrow' ).css( 'display', 'block' ); 
								arrowsHide( instance, selector ); 
								arrowsOn( instance, selector );
								jQuery(".imagelightbox").css("height", jQuery('.imagelightbox').height() - jQuery('.imagelightbox__caption').height()).css("width", "auto").css("left", (jQuery("body").width() / 2) - (jQuery(".imagelightbox").width() / 2));
								}
		});
});